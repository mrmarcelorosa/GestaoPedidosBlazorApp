@page "/Order/List"
@using GestaoPedidosBlazorApp.Client.Models
@using GestaoPedidosBlazorApp.Client.Services
@using System.Globalization;
@inject IJSRuntime JSRuntime
@inject OrderService _OrderService;
@inject NavigationManager Navigation

<div class="row">
    <div class="col-12">
        <div class="page-title-box d-sm-flex align-items-center justify-content-between bg-galaxy-transparent">
            <h4 class="mb-sm-0">Pedidos</h4>
        </div>
    </div>
</div>

<div class="card product">
    <div class="card-body">
        <div class="row">
            <div class="col-sm-3">
                <input style="margin-top:28px" type="text" class="form-control search" @bind="orderId" placeholder="Pedido ID">
            </div>
            <div class="col-sm-3">
                <input style="margin-top:28px" type="text" class="form-control search" @bind="clientName" placeholder="Nome do cliente">
            </div>
            <div class="col-sm-3">
                <label for="exampleInputdate" class="form-label">Data de</label>
                <input type="date" class="form-control" @bind="startDate" id="demo-datepicker" placeholder="Data de">
            </div>
            <div class="col-sm-3">
                <label for="exampleInputdate" class="form-label">Data a</label>
                <input type="date" class="form-control" @bind="endDate" id="demo-datepicker" placeholder="Data até">
            </div>
        </div>

        <div style="text-align:end; margin-top:10px">
            <button type="button" class="btn btn-primary w-100" style="max-width: 120px;" @onclick="LoadOrder">
                <i class="ri-equalizer-fill me-1 align-bottom"></i>
                Filtrar
            </button>
            <button class="btn btn-success" @onclick="AddAction">
                <i class="ri-add-line align-bottom me-1"></i> Novo Pedido
            </button>
        </div>

        
    </div>
</div>

@foreach (var item in OrderList)
{
    <div class="card product">
        <div class="card-body">
            <div class="row gy-3">
                <div class="col-sm">
                    <h5 class="fs-14 text-truncate">
                        Pedido: #@item.OrderId   - @item.ClientName
                    </h5>
                    <ul class="list-inline text-muted">
                        <li class="list-inline-item">Endereco Cobrança: <span class="fw-medium"> @item.BillingAddress</span></li>
                    </ul>
                    <ul class="list-inline text-muted">
                        <li class="list-inline-item">Endereço Entrega: <span class="fw-medium"> @item.DeliveryAddress</span></li>
                    </ul>


                </div>
                <div class="col-sm-auto">
                    <div class="text-lg-end">
                        <p class="text-muted mb-1">Total:</p>
                        <h5 class="fs-14"><span id="ticket_price" class="product-price">@FormatToBRL(@item.TotalPrice)</span></h5>
                    </div>
                </div>
            </div>
        </div>
        <!-- card body -->
        <div class="card-footer">
            <div class="row align-items-center gy-3">
                <div class="col-sm">
                    <div class="d-flex flex-wrap my-n1">
                        <div>
                            <a @onclick="() => Details(item.OrderId)" class="d-block text-body p-1 px-2" style="cursor: pointer;"><i class="ri-honour-fill text-muted align-bottom me-1"></i> Detalhes</a>
                        </div>
                        <div>
                            <a @onclick="() => ExportToExcel(item.OrderId)" class="d-block text-body p-1 px-2" style="cursor: pointer;"><i class="ri-install-fill text-muted align-bottom me-1"></i> Excel</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}



@code {
    private string orderId;
    private string clientName;
    private DateTime? startDate;
    private DateTime? endDate;
    private List<OrderHeader> OrderList = new List<OrderHeader>();

    public static string FormatToBRL(double value)
    {
        return value.ToString("C", new CultureInfo("pt-BR"));
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
    }

    public async Task LoadOrder()
    {
        OrderList = await _OrderService.GetOrderHeaderAsync(orderId,clientName,startDate,endDate);
    }

    public async Task AddAction()
    {
        Navigation.NavigateTo("/Order/Create");
    }

    public async Task Details(int orderId)
    {
        Navigation.NavigateTo($"/Order/Details/{orderId}");
    }



    private async Task SaveFileAsync(string fileName, byte[] data, string contentType)
    {
        using var fileStream = new DotNetStreamReference(new MemoryStream(data));
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, contentType, fileStream);
    }

    private async Task ExportToExcel(int orderId)
    {
        try
        {
            var excelData = await _OrderService.ExportOrderSummaryToExcelAsync(orderId);

            var fileName = $"Order_{orderId}_Summary.xlsx";
            await SaveFileAsync(fileName, excelData, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

}
